import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Input
from tensorflow.keras.callbacks import EarlyStopping

def create_dataset(data, window_size=60):
    X, y = [], []
    for i in range(window_size, len(data)):
        X.append(data[i - window_size:i])
        y.append(data[i])
    return np.array(X), np.array(y)

def preprocess_data(file_path="data/cleaned_stock_data.csv", window_size=60):
    df = pd.read_csv(file_path, parse_dates=['Date'])
    prices = df['BTCL'].values.reshape(-1, 1)
    scaler = MinMaxScaler()
    scaled = scaler.fit_transform(prices)
    X, y = create_dataset(scaled, window_size)
    X = X.reshape((X.shape[0], X.shape[1], 1))
    split = int(len(X) * 0.8)
    return X[:split], X[split:], y[:split], y[split:], scaler, df

def train_lstm_model(X_train, y_train, X_val, y_val):
    model = Sequential([
        Input(shape=(X_train.shape[1], 1)),
        LSTM(100, return_sequences=True),
        LSTM(100),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
    model.fit(X_train, y_train, validation_data=(X_val, y_val),
              epochs=50, batch_size=32, callbacks=[early_stop])
    return model

def predict_future(model, scaled_data, days, scaler, window_size=60):
    preds = []
    seq = scaled_data[-window_size:].reshape(1, window_size, 1)
    for _ in range(days):
        next_pred = model.predict(seq, verbose=0)[0][0]
        preds.append(next_pred)
        seq = np.append(seq[:, 1:, :], [[[next_pred]]], axis=1)
    return scaler.inverse_transform(np.array(preds).reshape(-1, 1))
